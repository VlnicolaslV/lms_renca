{"ast":null,"code":"// LMS/lms_renca/src/components/AdministradorService.js\nimport axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nconst API_BASE_URL = 'http://localhost:8000/api/municipalidad/';\nexport const AdministradorService = {\n  crearColegio: async colegioData => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No se ha encontrado un token de acceso');\n      }\n      const csrfToken = document.cookie.split('; ').find(row => row.startsWith('csrftoken=')).split('=')[1];\n      const response = await axios.post(API_BASE_URL + 'crear-colegio/', colegioData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'X-CSRFToken': csrfToken\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al crear colegio:\", error);\n      throw error;\n    }\n  },\n  crearDirector: async (rut, nombre, apellido, direccion, telefono, correo, fechaNacimiento, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}crear-director/`, {\n        rut,\n        nombre,\n        apellido,\n        direccion,\n        telefono,\n        correo,\n        fecha_nacimiento: fechaNacimiento,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al crear director:\", error);\n      throw error;\n    }\n  },\n  obtenerColegios: async municipalidadId => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-colegios/${municipalidadId}/`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener colegios:\", error);\n      throw error;\n    }\n  },\n  obtenerDirectores: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No se ha encontrado un token de acceso');\n      }\n      console.log(\"Token en la solicitud:\", token); // Imprimir el token\n\n      const response = await axios.get('http://localhost:8000/api/municipalidad/directores', {\n        headers: {\n          Authorization: `Bearer ${token}` // Asegurar el formato correcto\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener los directores:\", error);\n      throw error;\n    }\n  },\n  obtenerReportesCalificaciones: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-calificaciones/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener reportes de calificaciones:\", error);\n      throw error;\n    }\n  },\n  obtenerReportesAsistencia: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-asistencia/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener reportes de asistencia:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorColegio: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-colegio/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por colegio:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorCurso: async (colegioId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-curso/`, {\n        params: {\n          colegio_id: colegioId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por curso:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorAsignatura: async (cursoId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-asignatura/`, {\n        params: {\n          curso_id: cursoId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por asignatura:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorEstudiante: async (cursoId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-estudiante/`, {\n        params: {\n          curso_id: cursoId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por estudiante:\", error);\n      throw error;\n    }\n  }\n};\nexport default AdministradorService;","map":{"version":3,"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","API_BASE_URL","AdministradorService","crearColegio","colegioData","token","localStorage","getItem","Error","csrfToken","document","cookie","split","find","row","startsWith","response","post","headers","Authorization","data","error","console","crearDirector","rut","nombre","apellido","direccion","telefono","correo","fechaNacimiento","password","fecha_nacimiento","obtenerColegios","municipalidadId","get","obtenerDirectores","log","obtenerReportesCalificaciones","periodo","fechaInicio","fechaFin","params","municipalidad_id","fecha_inicio","fecha_fin","obtenerReportesAsistencia","obtenerResultadosPorColegio","obtenerResultadosPorCurso","colegioId","colegio_id","obtenerResultadosPorAsignatura","cursoId","curso_id","obtenerResultadosPorEstudiante"],"sources":["C:/Users/aggro/OneDrive/Desktop/LMS/lms_renca_frontend/src/services/administradorService.js"],"sourcesContent":["// LMS/lms_renca/src/components/AdministradorService.js\r\nimport axios from 'axios';\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api/municipalidad/';\r\n\r\nexport const AdministradorService = {\r\n  crearColegio: async (colegioData) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No se ha encontrado un token de acceso');\r\n      }\r\n      const csrfToken = document.cookie.split('; ').find(row => row.startsWith('csrftoken=')).split('=')[1];\r\n      const response = await axios.post(API_BASE_URL + 'crear-colegio/', colegioData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'X-CSRFToken': csrfToken\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al crear colegio:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  crearDirector: async (rut, nombre, apellido, direccion, telefono, correo, fechaNacimiento, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}crear-director/`, {\r\n        rut,\r\n        nombre,\r\n        apellido,\r\n        direccion,\r\n        telefono,\r\n        correo,\r\n        fecha_nacimiento: fechaNacimiento,\r\n        password\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al crear director:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerColegios: async (municipalidadId) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-colegios/${municipalidadId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener colegios:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerDirectores: async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No se ha encontrado un token de acceso');\r\n      }\r\n\r\n      console.log(\"Token en la solicitud:\", token); // Imprimir el token\r\n\r\n      const response = await axios.get('http://localhost:8000/api/municipalidad/directores', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}` // Asegurar el formato correcto\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener los directores:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerReportesCalificaciones: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-calificaciones/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener reportes de calificaciones:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerReportesAsistencia: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-asistencia/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener reportes de asistencia:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorColegio: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-colegio/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por colegio:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorCurso: async (colegioId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-curso/`, {\r\n        params: {\r\n          colegio_id: colegioId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por curso:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorAsignatura: async (cursoId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-asignatura/`, {\r\n        params: {\r\n          curso_id: cursoId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por asignatura:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorEstudiante: async (cursoId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-estudiante/`, {\r\n        params: {\r\n          curso_id: cursoId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por estudiante:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default AdministradorService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}