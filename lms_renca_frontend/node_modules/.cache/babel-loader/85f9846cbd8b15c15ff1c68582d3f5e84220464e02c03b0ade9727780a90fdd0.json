{"ast":null,"code":"// LMS/lms_renca/src/components/AdministradorService.js\n\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api/municipalidad/';\nexport const AdministradorService = {\n  crearColegio: async (nombre, direccion, telefono, directorId) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}crear-colegio/`, {\n        nombre,\n        direccion,\n        telefono,\n        director_id: directorId\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al crear colegio:\", error);\n      throw error;\n    }\n  },\n  crearDirector: async (rut, nombre, apellido, direccion, telefono, correo, fechaNacimiento, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}crear-director/`, {\n        rut,\n        nombre,\n        apellido,\n        direccion,\n        telefono,\n        correo,\n        fecha_nacimiento: fechaNacimiento,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al crear director:\", error);\n      throw error;\n    }\n  },\n  obtenerColegios: async municipalidadId => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-colegios/${municipalidadId}/`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener colegios:\", error);\n      throw error;\n    }\n  },\n  obtenerDirectores: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-directores/`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener directores:\", error);\n      throw error;\n    }\n  },\n  obtenerReportesCalificaciones: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-calificaciones/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener reportes de calificaciones:\", error);\n      throw error;\n    }\n  },\n  obtenerReportesAsistencia: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-asistencia/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener reportes de asistencia:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorColegio: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-colegio/`, {\n        params: {\n          municipalidad_id: municipalidadId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por colegio:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorCurso: async (colegioId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-curso/`, {\n        params: {\n          colegio_id: colegioId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por curso:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorAsignatura: async (cursoId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-asignatura/`, {\n        params: {\n          curso_id: cursoId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por asignatura:\", error);\n      throw error;\n    }\n  },\n  obtenerResultadosPorEstudiante: async (cursoId, periodo, fechaInicio, fechaFin) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-estudiante/`, {\n        params: {\n          curso_id: cursoId,\n          periodo,\n          fecha_inicio: fechaInicio,\n          fecha_fin: fechaFin\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error al obtener resultados por estudiante:\", error);\n      throw error;\n    }\n  }\n};\nexport default AdministradorService;","map":{"version":3,"names":["axios","API_BASE_URL","AdministradorService","crearColegio","nombre","direccion","telefono","directorId","response","post","director_id","data","error","console","crearDirector","rut","apellido","correo","fechaNacimiento","password","fecha_nacimiento","obtenerColegios","municipalidadId","get","obtenerDirectores","obtenerReportesCalificaciones","periodo","fechaInicio","fechaFin","params","municipalidad_id","fecha_inicio","fecha_fin","obtenerReportesAsistencia","obtenerResultadosPorColegio","obtenerResultadosPorCurso","colegioId","colegio_id","obtenerResultadosPorAsignatura","cursoId","curso_id","obtenerResultadosPorEstudiante"],"sources":["C:/Users/aggro/OneDrive/Desktop/Ing Informatica/LMS/lms_renca_frontend/src/services/administradorService.js"],"sourcesContent":["// LMS/lms_renca/src/components/AdministradorService.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api/municipalidad/';\r\n\r\nexport const AdministradorService = {\r\n  crearColegio: async (nombre, direccion, telefono, directorId) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}crear-colegio/`, {\r\n        nombre,\r\n        direccion,\r\n        telefono,\r\n        director_id: directorId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al crear colegio:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  crearDirector: async (rut, nombre, apellido, direccion, telefono, correo, fechaNacimiento, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}crear-director/`, {\r\n        rut,\r\n        nombre,\r\n        apellido,\r\n        direccion,\r\n        telefono,\r\n        correo,\r\n        fecha_nacimiento: fechaNacimiento,\r\n        password\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al crear director:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerColegios: async (municipalidadId) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-colegios/${municipalidadId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener colegios:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerDirectores: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-directores/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener directores:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerReportesCalificaciones: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-calificaciones/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener reportes de calificaciones:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerReportesAsistencia: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-reportes-asistencia/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener reportes de asistencia:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorColegio: async (municipalidadId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-colegio/`, {\r\n        params: {\r\n          municipalidad_id: municipalidadId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por colegio:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorCurso: async (colegioId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-curso/`, {\r\n        params: {\r\n          colegio_id: colegioId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por curso:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorAsignatura: async (cursoId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-asignatura/`, {\r\n        params: {\r\n          curso_id: cursoId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por asignatura:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  obtenerResultadosPorEstudiante: async (cursoId, periodo, fechaInicio, fechaFin) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}obtener-resultados-estudiante/`, {\r\n        params: {\r\n          curso_id: cursoId,\r\n          periodo,\r\n          fecha_inicio: fechaInicio,\r\n          fecha_fin: fechaFin\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error al obtener resultados por estudiante:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default AdministradorService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}