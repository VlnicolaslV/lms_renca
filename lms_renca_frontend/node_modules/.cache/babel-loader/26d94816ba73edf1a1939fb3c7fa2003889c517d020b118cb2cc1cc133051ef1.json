{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggro\\\\OneDrive\\\\Desktop\\\\LMS\\\\lms_renca_frontend\\\\src\\\\components\\\\director\\\\CrearAsignaturaForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport directorService from \"../../services/directorService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CrearAsignaturaForm() {\n  _s();\n  const [nombre, setNombre] = useState(\"\");\n  const [cursoId, setCursoId] = useState(\"\");\n  const [profesorRut, setProfesorRut] = useState(\"\"); // Nuevo estado para el RUT del profesor\n  const [cursos, setCursos] = useState([]);\n  const [profesores, setProfesores] = useState([]); // Nuevo estado para la lista de profesores\n\n  // Cargar los cursos y profesores disponibles\n  useEffect(() => {\n    const fetchCursos = async () => {\n      try {\n        const cursosData = await directorService.obtenerCursos();\n        setCursos(cursosData.cursos);\n      } catch (error) {\n        console.error(\"Error al obtener los cursos:\", error);\n      }\n    };\n    const fetchProfesores = async () => {\n      try {\n        const profesoresData = await directorService.obtenerProfesores(); // Llamada al servicio para obtener profesores\n        setProfesores(profesoresData.profesores);\n      } catch (error) {\n        console.error(\"Error al obtener los profesores:\", error);\n      }\n    };\n    fetchCursos();\n    fetchProfesores();\n  }, []);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      // Llamada al servicio para crear la asignatura con el profesor seleccionado\n      await directorService.crearAsignatura({\n        nombre,\n        curso_id: cursoId,\n        profesor_rut: profesorRut\n      });\n\n      // Limpiar los campos después de enviar el formulario\n      setNombre(\"\");\n      setCursoId(\"\");\n      setProfesorRut(\"\");\n      alert(\"Asignatura creada con éxito\");\n    } catch (error) {\n      console.error(\"Error al crear la asignatura:\", error);\n      // Mostrar un mensaje de error si algo sale mal\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"profesorRut\",\n        children: \"Profesor:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"profesorRut\",\n        value: profesorRut,\n        onChange: e => setProfesorRut(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Selecciona un profesor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), profesores.map(profesor => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: profesor.rut,\n          children: [profesor.nombre, \" \", profesor.apellido]\n        }, profesor.rut, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Crear Asignatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(CrearAsignaturaForm, \"WheAwifgDa9U1jPpm7ATcLQwZVU=\");\n_c = CrearAsignaturaForm;\nexport default CrearAsignaturaForm;\nvar _c;\n$RefreshReg$(_c, \"CrearAsignaturaForm\");","map":{"version":3,"names":["React","useState","useEffect","directorService","jsxDEV","_jsxDEV","CrearAsignaturaForm","_s","nombre","setNombre","cursoId","setCursoId","profesorRut","setProfesorRut","cursos","setCursos","profesores","setProfesores","fetchCursos","cursosData","obtenerCursos","error","console","fetchProfesores","profesoresData","obtenerProfesores","handleSubmit","event","preventDefault","crearAsignatura","curso_id","profesor_rut","alert","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","required","map","profesor","rut","apellido","type","_c","$RefreshReg$"],"sources":["C:/Users/aggro/OneDrive/Desktop/LMS/lms_renca_frontend/src/components/director/CrearAsignaturaForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport directorService from \"../../services/directorService\";\r\n\r\nfunction CrearAsignaturaForm() {\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [cursoId, setCursoId] = useState(\"\");\r\n  const [profesorRut, setProfesorRut] = useState(\"\"); // Nuevo estado para el RUT del profesor\r\n  const [cursos, setCursos] = useState([]);\r\n  const [profesores, setProfesores] = useState([]); // Nuevo estado para la lista de profesores\r\n\r\n  // Cargar los cursos y profesores disponibles\r\n  useEffect(() => {\r\n    const fetchCursos = async () => {\r\n      try {\r\n        const cursosData = await directorService.obtenerCursos();\r\n        setCursos(cursosData.cursos);\r\n      } catch (error) {\r\n        console.error(\"Error al obtener los cursos:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchProfesores = async () => {\r\n      try {\r\n        const profesoresData = await directorService.obtenerProfesores(); // Llamada al servicio para obtener profesores\r\n        setProfesores(profesoresData.profesores);\r\n      } catch (error) {\r\n        console.error(\"Error al obtener los profesores:\", error);\r\n      }\r\n    };\r\n\r\n    fetchCursos();\r\n    fetchProfesores();\r\n  }, []);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      // Llamada al servicio para crear la asignatura con el profesor seleccionado\r\n      await directorService.crearAsignatura({ nombre, curso_id: cursoId, profesor_rut: profesorRut });\r\n\r\n      // Limpiar los campos después de enviar el formulario\r\n      setNombre(\"\");\r\n      setCursoId(\"\");\r\n      setProfesorRut(\"\");\r\n      alert(\"Asignatura creada con éxito\");\r\n    } catch (error) {\r\n      console.error(\"Error al crear la asignatura:\", error);\r\n      // Mostrar un mensaje de error si algo sale mal\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* ... (campos de nombre y curso) ... */}\r\n\r\n      <div> {/* Nuevo select para seleccionar el profesor */}\r\n        <label htmlFor=\"profesorRut\">Profesor:</label>\r\n        <select\r\n          id=\"profesorRut\"\r\n          value={profesorRut}\r\n          onChange={(e) => setProfesorRut(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\">Selecciona un profesor</option>\r\n          {profesores.map((profesor) => (\r\n            <option key={profesor.rut} value={profesor.rut}>\r\n              {profesor.nombre} {profesor.apellido}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <button type=\"submit\">Crear Asignatura</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CrearAsignaturaForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}